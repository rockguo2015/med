package com.fudanmed.platform.core.web feature deliver{
	
	import java.util.*
	import edu.fudan.langlab.uidl.domain.app.*
	import edu.fudan.langlab.domain.organization.*
	import edu.fudan.langlab.uidl.domain.app.client.web.*
	import com.uniquesoft.gwt.client.common.*
	import com.uniquesoft.gwt.client.common.widgets.*
	import edu.fudan.langlab.csv.shared.*
	import com.fudanmed.platform.core.web.shared.deliver.*
	import com.fudanmed.platform.core.web.shared.common.*
	import com.fudanmed.platform.core.web.client.common.*
	import com.fudanmed.platform.core.web.client.deliver.*
	import com.fudanmed.platform.core.common.*
	import com.fudanmed.platform.core.domain.*
	import com.fudanmed.platform.core.deliver.*
	import com.fudanmed.platform.core.deliver.^proxy.*
	import com.fudanmed.platform.core.web.*
	import com.fudanmed.platform.core.web.shared.deliver.*
	import com.fudanmed.platform.core.web.client.deliver.*
	import com.fudanmed.platform.core.web.client.organization.*
	import com.fudanmed.platform.core.web.client.tree.*
	import com.uniquesoft.gwt.client.common.selector.IHasObjectSelectionProvider
	
	ui-entity UIInHospitalPatient for DLInHospitalPatient{
		name : String "姓名"
		sid  : String "住院号"
		age : Integer "年龄"
		gender : UIGender "性别" 
		location : proxy of DLInHospitalLocation "位置"
		bedNumber : String "床号"
		
		map InHospitalPatientMapper validate by InHospitalPatientValidator{
			direct{name, sid, age, gender, location, bedNumber}
		}
	
		constraints InHospitalPatientValidator{
			rule Required on name
		}
	
		ui-component InHospitalPatientForm as GXTForm{
			binding{
				name, sid, age, gender as ComboBoxItem,
				location as ComboBoxItem content from PatientLocationContentProvider,
				bedNumber
			}
			con : Widget
			op asWidget() : Widget{
				con = con.lazy[
					widgets.VLayout=>[
						addFill(TABLE=>[	
							tr=>[
								td=>[it+=sid.asWidget]
								td=>[it+=age.asWidget]
								td=>[it+=gender.asWidget]
							]
							tr=>[
								td=>[it+=location.asWidget]
								td=>[it+=bedNumber.asWidget]
							]
						]
						)			
					]
				]
			}	
			op asDialogWidget() : Widget{
				con = con.lazy[
					widgets.VLayout=>[
						addFill(name.asWidget)
						addFill(sid.asWidget)
						addFill(age.asWidget)
						addFill(gender.asWidget)
						addFill(location.asWidget)
						addFill(bedNumber.asWidget)
					]
				]
			}					
		}
	
		ui-component InHospitalPatientListGrid as GXTGrid{
			binding{name,sid,age, gender, location,bedNumber}
		}
	}
		signal InHospitalPatientsChanged
	
	ui-command CreateInHospitalPatientCommand "新建"{
		factory createOrUpdateInHospitalPatientPresenter : CreateOrUpdateInHospitalPatientPresenter
		execute{
			createOrUpdateInHospitalPatientPresenter.get.setup4Create()[
				popup(it)
			]
		}
	}
	ui-command UpdateInHospitalPatientCommand require proxy of DLInHospitalPatient "修改"{
		factory createOrUpdateInHospitalPatientPresenter : CreateOrUpdateInHospitalPatientPresenter
		execute{
			createOrUpdateInHospitalPatientPresenter.get.setup4Update(value)[
				popup(it)
			]
		}
	}
	ui-command DeleteInHospitalPatientCommand require proxy of DLInHospitalPatient "删除"{
		execute{
			widgets.ConfirmMessageBox("确认删除","确认删除:"+value.name)[
				service.delete(value,onSuccess[
					fire eventbus.InHospitalPatientsChanged
				])
			].show
		}
		service{
			@Inject dao : DLInHospitalPatientDAO
			op delete(value : proxy of DLInHospitalPatient):void{
				dao.delete(resolve value)
			}
		}
	}

	presenter CreateOrUpdateInHospitalPatientPresenter implements IHasObjectSelectionProvider<UIInHospitalPatient> for UIInHospitalPatient{
		view interface{
			op getActionContext():ActionContext<UIInHospitalPatient>
		}
		
		interaction{
			commiter : (CommitResultNotifier)=>void
			input prepare.setup4Create(){
				commiter=[notifier|
					service.createValue(getView().value,onSuccess[
						fire eventbus.InHospitalPatientsChanged()
						notifier.success
					])
				]
				this.activate[
					done
				]
			}
			
			input prepare.setup4Update(value : proxy of DLInHospitalPatient){
//				commiter=[notifier|
//					service.updateValue(getView().value,onSuccess[
//						fire eventbus.InHospitalPatientsChanged()
//						notifier.success
//					])
//				]
				this.activate[
					service.loadValue(value,onSuccess[
//						getView().setValue(it)
						done
					])
				]
			}
			input prepare.setup4Cxt(value : proxy of DLInHospitalPatient){
				commiter=[notifier|
					service.updateValue(getView().value,onSuccess[
						fire eventbus.InHospitalPatientsChanged()
						notifier.success
					])
				]
				this.activate[
					service.loadValue(value,onSuccess[
//						getView().setValue(it)
						done
					])
				]
			}		
			input form-commit {
				commiter.apply(notifier)
			}	
			input call.getSelectionProvider():ObjectSelectionProvider<UIInHospitalPatient>{
				getView().getActionContext
			}		
		}
		
		service{
			@Inject mapper : InHospitalPatientMapper
			@Inject dao : DLInHospitalPatientDAO
			op loadValue(pvalue : proxy of DLInHospitalPatient) : UIInHospitalPatient{
				mapper.transform(resolve pvalue)
			}
			op updateValue(uivalue : UIInHospitalPatient) : void{
				mapper.transform(uivalue,(resolve uivalue))
			}
			op createValue(uivalue : UIInHospitalPatient) : void{
				println("OK button is pressed");
				dao.create[
					mapper.transform(uivalue,it)
				]
			}
		}
	}
	
	view CreateOrUpdateInHospitalPatientView<InHospitalPatientForm> for CreateOrUpdateInHospitalPatientPresenter ui-size:(300,200) ui-title:"新增病人"{
		@Inject  patientform: InHospitalPatientForm
		@Inject listGrid : InHospitalPatientListGrid
		
		initializer{
			this += widgets.DialogContent(form.asDialogWidget)
		}
		op getActionContext():ActionContext<UIInHospitalPatient>{
			listGrid.createActionContext
		}
	}

}